// Generated by http://www.dotnetwise.com/code/externs/
var bitauth = {
    "PREFIX": {
        "0": {},
        "1": {},
        "constructor": function () {},
        "_isBuffer": {},
        "_set": function () {},
        "get": function () {},
        "set": function () {},
        "write": function () {},
        "toString": function () {},
        "toLocaleString": function () {},
        "toJSON": function () {},
        "equals": function () {},
        "compare": function () {},
        "indexOf": function () {},
        "copy": function () {},
        "slice": function () {},
        "readUIntLE": function () {},
        "readUIntBE": function () {},
        "readUInt8": function () {},
        "readUInt16LE": function () {},
        "readUInt16BE": function () {},
        "readUInt32LE": function () {},
        "readUInt32BE": function () {},
        "readIntLE": function () {},
        "readIntBE": function () {},
        "readInt8": function () {},
        "readInt16LE": function () {},
        "readInt16BE": function () {},
        "readInt32LE": function () {},
        "readInt32BE": function () {},
        "readFloatLE": function () {},
        "readFloatBE": function () {},
        "readDoubleLE": function () {},
        "readDoubleBE": function () {},
        "writeUInt8": function () {},
        "writeUIntLE": function () {},
        "writeUIntBE": function () {},
        "writeUInt16LE": function () {},
        "writeUInt16BE": function () {},
        "writeUInt32LE": function () {},
        "writeUInt32BE": function () {},
        "writeIntLE": function () {},
        "writeIntBE": function () {},
        "writeInt8": function () {},
        "writeInt16LE": function () {},
        "writeInt16BE": function () {},
        "writeInt32LE": function () {},
        "writeInt32BE": function () {},
        "writeFloatLE": function () {},
        "writeFloatBE": function () {},
        "writeDoubleLE": function () {},
        "writeDoubleBE": function () {},
        "fill": function () {},
        "inspect": function () {},
        "toArrayBuffer": function () {},
        "parent": function () {}
    },
    "generateSin": function () {},
    "getPublicKeyFromPrivateKey": function () {},
    "getSinFromPublicKey": function () {},
    "sign": function () {},
    "verifySignature": function () {},
    "validateSin": function () {},
    "_generateRandomPair": function () {},
    "_getPublicKeyFromPrivateKey": function () {},
    "_sign": function () {},
    "_verifySignature": function () {}
}
